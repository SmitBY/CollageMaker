//
//  CollageTemplateModel.swift
//  CollageMaker
//
//  Created by Vasili krasnoyski on 29.01.2025.
//

import Foundation
import UIKit

// Data model representing a collage template
struct CollageTemplate {
    let id: Int
    let name: String
    let positions: [(Int, Int)]
}

// MARK: - Saved Collage Model
struct SavedCollage {
    let id: String
    let image: UIImage
    let createdDate: Date
    let templateName: String
    let aspectRatioId: String
    
    init(image: UIImage, templateName: String, aspectRatioId: String = "square") {
        self.id = UUID().uuidString
        self.image = image
        self.createdDate = Date()
        self.templateName = templateName
        self.aspectRatioId = aspectRatioId
    }
    
    init(id: String, image: UIImage, createdDate: Date, templateName: String, aspectRatioId: String = "square") {
        self.id = id
        self.image = image
        self.createdDate = createdDate
        self.templateName = templateName
        self.aspectRatioId = aspectRatioId
    }
}

// MARK: - Saved Collages Manager
class SavedCollagesManager {
    static let shared = SavedCollagesManager()
    private let userDefaults = UserDefaults.standard
    private let collagesKey = "SavedCollages"
    
    private init() {}
    
    func saveCollage(_ collage: SavedCollage) {
        print("üíæ [SavedCollagesManager] –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–ª–∞–∂: \(collage.templateName) —Å ID: \(collage.id)")
        
        var savedCollages = getAllCollages()
        savedCollages.append(collage)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Documents
        if let imageData = collage.image.jpegData(compressionQuality: 0.8) {
            let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            let imagePath = documentsPath.appendingPathComponent("\(collage.id).jpg")
            do {
                try imageData.write(to: imagePath)
                print("‚úÖ [SavedCollagesManager] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: \(imagePath)")
            } catch {
                print("‚ùå [SavedCollagesManager] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(error)")
            }
        } else {
            print("‚ùå [SavedCollagesManager] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ UserDefaults
        let collageData = savedCollages.map { collage in
            [
                "id": collage.id,
                "createdDate": collage.createdDate.timeIntervalSince1970,
                "templateName": collage.templateName,
                "aspectRatioId": collage.aspectRatioId
            ]
        }
        userDefaults.set(collageData, forKey: collagesKey)
        print("‚úÖ [SavedCollagesManager] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—Å–µ–≥–æ –∫–æ–ª–ª–∞–∂–µ–π: \(savedCollages.count)")
    }
    
    func getAllCollages() -> [SavedCollage] {
        print("üìÇ [SavedCollagesManager] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–∞–∂–∏...")
        
        guard let collagesData = userDefaults.array(forKey: collagesKey) as? [[String: Any]] else {
            print("üìÇ [SavedCollagesManager] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–∞–∂–µ–π –≤ UserDefaults")
            return []
        }
        
        print("üìÇ [SavedCollagesManager] –ù–∞–π–¥–µ–Ω–æ \(collagesData.count) –∑–∞–ø–∏—Å–µ–π –≤ UserDefaults")
        
        let loadedCollages = collagesData.compactMap { data -> SavedCollage? in
            guard let id = data["id"] as? String,
                  let timestamp = data["createdDate"] as? TimeInterval,
                  let templateName = data["templateName"] as? String else {
                print("‚ö†Ô∏è [SavedCollagesManager] –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞")
                return nil
            }
            
            let aspectRatioId = data["aspectRatioId"] as? String ?? "square"
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Documents
            let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
            let imagePath = documentsPath.appendingPathComponent("\(id).jpg")
            
            guard let imageData = try? Data(contentsOf: imagePath),
                  let image = UIImage(data: imageData) else {
                print("‚ö†Ô∏è [SavedCollagesManager] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ \(id)")
                return nil
            }
            
            print("‚úÖ [SavedCollagesManager] –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–ª–ª–∞–∂: \(templateName) (\(id))")
            return SavedCollage(
                id: id,
                image: image,
                createdDate: Date(timeIntervalSince1970: timestamp),
                templateName: templateName,
                aspectRatioId: aspectRatioId
            )
        }.sorted { $0.createdDate > $1.createdDate } // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        
        print("üìÇ [SavedCollagesManager] –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ \(loadedCollages.count) –∫–æ–ª–ª–∞–∂–µ–π")
        return loadedCollages
    }
    
    func deleteCollage(withId id: String) {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ UserDefaults (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        guard let collagesData = userDefaults.array(forKey: collagesKey) as? [[String: Any]] else {
            return
        }
        
        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–∞–∂ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        let updatedCollagesData = collagesData.filter { data in
            guard let collageId = data["id"] as? String else { return true }
            return collageId != id
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UserDefaults
        userDefaults.set(updatedCollagesData, forKey: collagesKey)
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Documents
        let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        let imagePath = documentsPath.appendingPathComponent("\(id).jpg")
        
        do {
            try FileManager.default.removeItem(at: imagePath)
            print("Successfully deleted collage file: \(id).jpg")
        } catch {
            print("Error deleting collage file: \(error.localizedDescription)")
        }
    }
    
    // MARK: - Debug Methods
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–ª–ª–∞–∂–µ–π
    func checkFileIntegrity() {
        guard let collagesData = userDefaults.array(forKey: collagesKey) as? [[String: Any]] else {
            print("No collages metadata found")
            return
        }
        
        let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]
        
        for data in collagesData {
            guard let id = data["id"] as? String else { continue }
            let imagePath = documentsPath.appendingPathComponent("\(id).jpg")
            let fileExists = FileManager.default.fileExists(atPath: imagePath.path)
            print("Collage \(id): metadata exists, file exists: \(fileExists)")
        }
    }
}
