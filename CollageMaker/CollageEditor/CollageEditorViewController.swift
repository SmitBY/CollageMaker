//
//  CollageEditorViewController.swift
//  CollageMaker
//
//  Created by Vasili krasnoyski on 31.01.2025.
//

import UIKit
import SnapKit
import RxSwift
import RxCocoa
import Photos

/// View controller for the Collage Editor screen.
/// It is initialized with a CollageEditorViewModel.
class CollageEditorViewController: UIViewController {
    
    weak var coordinator: HomeTabBarCoordinator?
    
    // MARK: - Properties
    
    /// The view model for the editor screen.
    private let viewModel: CollageEditorViewModel
    private let disposeBag = DisposeBag()
    
    // MARK: - UI Elements
    
    private let collageView = UIView()
    private let backgroundImageView = UIImageView()
    private let saveButton = UIButton(type: .system)
    private let addTextButton = UIButton(type: .system)
    private let addStickerButton = UIButton(type: .system)
    private let changeBackgroundButton = UIButton(type: .system)
    
    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
    private let slidersContainerView = UIView()
    
    // –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
    private let cornerRadiusSlider: UISlider = {
        let slider = UISlider()
        slider.minimumValue = 0
        slider.maximumValue = 20
        slider.value = 4
        return slider
    }()
    
    private let cornerRadiusLabel: UILabel = {
        let label = UILabel()
        label.text = "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ: 4"
        label.font = UIFont.systemFont(ofSize: 14)
        label.textAlignment = .center
        return label
    }()
    
    // –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
    private let spacingSlider: UISlider = {
        let slider = UISlider()
        slider.minimumValue = 0
        slider.maximumValue = 16
        slider.value = 8
        return slider
    }()
    
    private let spacingLabel: UILabel = {
        let label = UILabel()
        label.text = "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: 8"
        label.font = UIFont.systemFont(ofSize: 14)
        label.textAlignment = .center
        return label
    }()
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
    private var selectedPhotos: [UIImage] = [] // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    private var textLayers: [TextLayerView] = [] // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ª–æ–∏
    private var stickerViews: [StickerView] = [] // –°—Ç–∏–∫–µ—Ä—ã
    private var borderViews: [BorderDragView] = [] // –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    private var currentTextLayer: TextLayerView?
    private var currentStickerView: StickerView?
    private var textEditingPanel: TextEditingPanel?
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
    private var currentColumnWidths: [CGFloat] = []
    private var currentRowHeights: [CGFloat] = []
    private var currentInnerMargin: CGFloat = 8
    
    /// Stores the currently selected image's index path (for image picker usage)
    private var currentIndexPath: IndexPath?
    
    // We'll store gridContainer's tag for later retrieval.
    private let gridContainerTag = 999
    
    // Advanced gesture handling
    private var gestureHandlers: [AdvancedImageGestureHandler] = []
    private var selectedImageView: UIImageView?
    
    // MARK: - Initializer
    
    /// Designated initializer with dependency injection.
    init(viewModel: CollageEditorViewModel, selectedPhotos: [UIImage] = []) {
        self.viewModel = viewModel
        self.selectedPhotos = selectedPhotos
        super.init(nibName: nil, bundle: nil)
        print("[CollageEditorViewController] init(viewModel:) called")
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Lifecycle Methods
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("[CollageEditorViewController] viewDidLoad called")
        setupUI()
        setupBindings()
        
        if let template = viewModel.collageTemplate.value {
            setupCollageView(with: template)
            // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            initializeViewModelWithSelectedPhotos()
            fillCollageWithSelectedPhotos()
        }
    }
    
    // MARK: - UI Setup
    
    private func setupUI() {
        view.backgroundColor = .systemBackground
        title = "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–æ–ª–ª–∞–∂–∞"
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        saveButton.setTitle("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", for: .normal)
        saveButton.titleLabel?.font = UIFont.boldSystemFont(ofSize: 18)
        saveButton.backgroundColor = .systemBlue
        saveButton.setTitleColor(.white, for: .normal)
        saveButton.layer.cornerRadius = 8
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        addTextButton.setTitle("+ –¢–µ–∫—Å—Ç", for: .normal)
        addTextButton.titleLabel?.font = UIFont.systemFont(ofSize: 16)
        addTextButton.backgroundColor = .systemGreen
        addTextButton.setTitleColor(.white, for: .normal)
        addTextButton.layer.cornerRadius = 8
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
        addStickerButton.setTitle("üòÄ", for: .normal)
        addStickerButton.titleLabel?.font = UIFont.systemFont(ofSize: 20)
        addStickerButton.backgroundColor = .systemPurple
        addStickerButton.setTitleColor(.white, for: .normal)
        addStickerButton.layer.cornerRadius = 8
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞
        changeBackgroundButton.setTitle("–§–æ–Ω", for: .normal)
        changeBackgroundButton.titleLabel?.font = UIFont.systemFont(ofSize: 16)
        changeBackgroundButton.backgroundColor = .systemOrange
        changeBackgroundButton.setTitleColor(.white, for: .normal)
        changeBackgroundButton.layer.cornerRadius = 8
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –∫–æ–ª–ª–∞–∂–∞
        collageView.backgroundColor = .lightGray
        collageView.layer.cornerRadius = 12
        collageView.clipsToBounds = true
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        backgroundImageView.contentMode = .scaleAspectFill
        backgroundImageView.clipsToBounds = true
        backgroundImageView.layer.cornerRadius = 12
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
        slidersContainerView.backgroundColor = .systemBackground
        slidersContainerView.layer.cornerRadius = 8
        slidersContainerView.layer.borderWidth = 1
        slidersContainerView.layer.borderColor = UIColor.systemGray4.cgColor
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ view
        view.addSubview(collageView)
        view.addSubview(slidersContainerView)
        view.addSubview(saveButton)
        view.addSubview(addTextButton)
        view.addSubview(addStickerButton)
        view.addSubview(changeBackgroundButton)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ collageView (—Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ, —á—Ç–æ–±—ã –æ–Ω–æ –±—ã–ª–æ –ø–æ–∑–∞–¥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        collageView.addSubview(backgroundImageView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∑—É–Ω–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        slidersContainerView.addSubview(cornerRadiusLabel)
        slidersContainerView.addSubview(cornerRadiusSlider)
        slidersContainerView.addSubview(spacingLabel)
        slidersContainerView.addSubview(spacingSlider)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ constraints
        collageView.snp.makeConstraints { make in
            make.top.equalTo(view.safeAreaLayoutGuide).offset(20)
            make.leading.trailing.equalToSuperview().inset(20)
            make.bottom.equalTo(slidersContainerView.snp.top).offset(-10)
        }
        
        // Constraints –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å collageView
        backgroundImageView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        slidersContainerView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview().inset(20)
            make.bottom.equalTo(saveButton.snp.top).offset(-10)
            make.height.equalTo(120)
        }
        
        // Constraints –¥–ª—è –ø–æ–ª–∑—É–Ω–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
        cornerRadiusLabel.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(12)
            make.leading.equalToSuperview().offset(16)
            make.width.equalTo(120)
        }
        
        cornerRadiusSlider.snp.makeConstraints { make in
            make.centerY.equalTo(cornerRadiusLabel)
            make.leading.equalTo(cornerRadiusLabel.snp.trailing).offset(12)
            make.trailing.equalToSuperview().offset(-16)
            make.height.equalTo(30)
        }
        
        spacingLabel.snp.makeConstraints { make in
            make.top.equalTo(cornerRadiusLabel.snp.bottom).offset(20)
            make.leading.equalToSuperview().offset(16)
            make.width.equalTo(120)
        }
        
        spacingSlider.snp.makeConstraints { make in
            make.centerY.equalTo(spacingLabel)
            make.leading.equalTo(spacingLabel.snp.trailing).offset(12)
            make.trailing.equalToSuperview().offset(-16)
            make.height.equalTo(30)
        }
        
        saveButton.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview().inset(20)
            make.bottom.equalTo(view.safeAreaLayoutGuide).offset(-20)
            make.height.equalTo(50)
        }
        
        addTextButton.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(20)
            make.bottom.equalTo(slidersContainerView.snp.top).offset(-10)
            make.width.equalTo(80)
            make.height.equalTo(40)
        }
        
        addStickerButton.snp.makeConstraints { make in
            make.trailing.equalTo(addTextButton.snp.leading).offset(-10)
            make.bottom.equalTo(slidersContainerView.snp.top).offset(-10)
            make.width.equalTo(50)
            make.height.equalTo(40)
        }
        
        changeBackgroundButton.snp.makeConstraints { make in
            make.trailing.equalTo(addStickerButton.snp.leading).offset(-10)
            make.bottom.equalTo(slidersContainerView.snp.top).offset(-10)
            make.width.equalTo(60)
            make.height.equalTo(40)
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        ensureButtonsOnTop()
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∂–µ—Å—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Ç–∞–ø–µ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
        setupCollageViewTapGesture()
    }
    
    private func ensureButtonsOnTop() {
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
        view.bringSubviewToFront(slidersContainerView)
        view.bringSubviewToFront(saveButton)
        view.bringSubviewToFront(addTextButton)
        view.bringSubviewToFront(addStickerButton)
        view.bringSubviewToFront(changeBackgroundButton)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–Ω—å –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        saveButton.layer.shadowColor = UIColor.black.cgColor
        saveButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        saveButton.layer.shadowOpacity = 0.3
        saveButton.layer.shadowRadius = 4
        
        addTextButton.layer.shadowColor = UIColor.black.cgColor
        addTextButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        addTextButton.layer.shadowOpacity = 0.3
        addTextButton.layer.shadowRadius = 4
        
        addStickerButton.layer.shadowColor = UIColor.black.cgColor
        addStickerButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        addStickerButton.layer.shadowOpacity = 0.3
        addStickerButton.layer.shadowRadius = 4
        
        changeBackgroundButton.layer.shadowColor = UIColor.black.cgColor
        changeBackgroundButton.layer.shadowOffset = CGSize(width: 0, height: 2)
        changeBackgroundButton.layer.shadowOpacity = 0.3
        changeBackgroundButton.layer.shadowRadius = 4
        
        slidersContainerView.layer.shadowColor = UIColor.black.cgColor
        slidersContainerView.layer.shadowOffset = CGSize(width: 0, height: 2)
        slidersContainerView.layer.shadowOpacity = 0.1
        slidersContainerView.layer.shadowRadius = 4
    }
    
    private func setupSquareEditingArea() {
        // –°–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        let squareSize = min(collageView.bounds.width, collageView.bounds.height) - 40
        
        let editingArea = UIView()
        editingArea.backgroundColor = .clear
        editingArea.layer.borderColor = UIColor.gray.cgColor
        editingArea.layer.borderWidth = 2
        editingArea.layer.cornerRadius = 8
        editingArea.tag = 1000 // –¢–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        collageView.addSubview(editingArea)
        editingArea.snp.makeConstraints { make in
            make.center.equalToSuperview()
            make.width.height.equalTo(squareSize)
        }
    }
    
    private func fillCollageWithSelectedPhotos() {
        guard let gridContainer = collageView.viewWithTag(gridContainerTag) else { return }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–µ—Å—Ç–æ–≤
        gestureHandlers.removeAll()
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–ª–∏—Ç–∫–∞–º –≤ —à–∞–±–ª–æ–Ω–µ
        for index in 0..<gridContainer.subviews.count {
            guard let tileView = gridContainer.subviews[safe: index],
                  let imageView = tileView.subviews.first as? UIImageView else { continue }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            var imageToUse: UIImage?
            let indexPath = IndexPath(item: index, section: 0)
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º viewModel (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            if let modelImage = viewModel.getImage(at: indexPath) {
                imageToUse = modelImage
            }
            // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º selectedPhotos (–∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
            else if index < selectedPhotos.count && selectedPhotos[index].size != .zero {
                imageToUse = selectedPhotos[index]
            }
            
            if let image = imageToUse {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                imageView.image = image
                imageView.contentMode = .scaleAspectFill
                imageView.backgroundColor = .clear
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–µ—Å—Ç–æ–≤
                let gestureHandler = AdvancedImageGestureHandler(imageView: imageView, containerView: collageView)
                gestureHandler.delegate = self
                gestureHandlers.append(gestureHandler)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                gestureHandler.updateDeleteButtonVisibility()
                
                imageView.tag = index
                imageView.isUserInteractionEnabled = true
            } else {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º placeholder –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
                imageView.image = UIImage(named: "placeholder")
                imageView.contentMode = .scaleAspectFill
                imageView.backgroundColor = .lightGray
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–ø –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                let tapGesture = UITapGestureRecognizer(target: self, action: #selector(selectImageForTile(_:)))
                imageView.addGestureRecognizer(tapGesture)
                imageView.tag = index
                imageView.isUserInteractionEnabled = true
            }
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∂–µ—Å—Ç–æ–≤
        ensureButtonsOnTop()
    }
    
    @objc private func selectImageForTile(_ gesture: UITapGestureRecognizer) {
        guard let imageView = gesture.view as? UIImageView else { return }
        
        currentIndexPath = IndexPath(item: imageView.tag, section: 0)
        presentImagePicker()
    }
    
    // MARK: - Creative Template Styling
    
    private func applyCreativeStyle(to tileView: UIView, template: CollageTemplate, position: (Int, Int), index: Int) {
        switch template.name {
        case "Heart 7":
            // –û—Å–æ–±–∞—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã —Å–µ—Ä–¥—Ü–∞
            tileView.layer.cornerRadius = tileView.bounds.width / 6
            tileView.layer.shadowColor = UIColor.red.cgColor
            tileView.layer.shadowOpacity = 0.3
            tileView.layer.shadowRadius = 4
            tileView.layer.shadowOffset = CGSize(width: 0, height: 2)
            
            // –í–µ—Ä—Ö–Ω–∏–µ —á–∞—Å—Ç–∏ —Å–µ—Ä–¥—Ü–∞ (–∏–Ω–¥–µ–∫—Å—ã 0, 1) - –±–æ–ª–µ–µ –æ–∫—Ä—É–≥–ª—ã–µ
            if index == 0 || index == 1 {
                tileView.layer.cornerRadius = tileView.bounds.width / 3
            }
            // –ù–∏–∂–Ω–∏–π –∫–æ–Ω—á–∏–∫ —Å–µ—Ä–¥—Ü–∞ (–∏–Ω–¥–µ–∫—Å 6)
            else if index == 6 {
                tileView.layer.cornerRadius = tileView.bounds.width / 4
                // –î–µ–ª–∞–µ–º –∫–æ–Ω—á–∏–∫ –±–æ–ª–µ–µ –∑–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–º
                let trianglePath = UIBezierPath()
                let bounds = tileView.bounds
                trianglePath.move(to: CGPoint(x: bounds.midX, y: 0))
                trianglePath.addLine(to: CGPoint(x: 0, y: bounds.height * 0.7))
                trianglePath.addLine(to: CGPoint(x: bounds.width, y: bounds.height * 0.7))
                trianglePath.close()
                
                let maskLayer = CAShapeLayer()
                maskLayer.path = trianglePath.cgPath
                tileView.layer.mask = maskLayer
            }
            
        case "Circle 4":
            tileView.layer.cornerRadius = min(tileView.bounds.width, tileView.bounds.height) / 2
            
        case "Wave Split 2", "Curve Split 2":
            tileView.layer.cornerRadius = 12
            
        case "Triangle 3":
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω—É—é –º–∞—Å–∫—É
            let trianglePath = UIBezierPath()
            let bounds = tileView.bounds
            if index == 0 {
                // –í–µ—Ä—Ö–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                trianglePath.move(to: CGPoint(x: bounds.midX, y: 0))
                trianglePath.addLine(to: CGPoint(x: 0, y: bounds.height))
                trianglePath.addLine(to: CGPoint(x: bounds.width, y: bounds.height))
            } else if index == 1 {
                // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                trianglePath.move(to: CGPoint(x: 0, y: 0))
                trianglePath.addLine(to: CGPoint(x: 0, y: bounds.height))
                trianglePath.addLine(to: CGPoint(x: bounds.midX, y: bounds.height))
            } else {
                // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                trianglePath.move(to: CGPoint(x: bounds.width, y: 0))
                trianglePath.addLine(to: CGPoint(x: bounds.midX, y: bounds.height))
                trianglePath.addLine(to: CGPoint(x: bounds.width, y: bounds.height))
            }
            trianglePath.close()
            
            let maskLayer = CAShapeLayer()
            maskLayer.path = trianglePath.cgPath
            tileView.layer.mask = maskLayer
            
        case "Diamond 4":
            // –°–æ–∑–¥–∞–µ–º —Ä–æ–º–±–æ–≤–∏–¥–Ω—É—é –º–∞—Å–∫—É
            let diamondPath = UIBezierPath()
            let bounds = tileView.bounds
            let center = CGPoint(x: bounds.midX, y: bounds.midY)
            let radius = min(bounds.width, bounds.height) / 3
            
            diamondPath.move(to: CGPoint(x: center.x, y: center.y - radius))
            diamondPath.addLine(to: CGPoint(x: center.x + radius, y: center.y))
            diamondPath.addLine(to: CGPoint(x: center.x, y: center.y + radius))
            diamondPath.addLine(to: CGPoint(x: center.x - radius, y: center.y))
            diamondPath.close()
            
            let maskLayer = CAShapeLayer()
            maskLayer.path = diamondPath.cgPath
            tileView.layer.mask = maskLayer
            
        case "Polaroid Stack":
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ –ø–æ–ª—è—Ä–æ–∏–¥—ã
            let rotations: [CGFloat] = [-0.1, 0.15, -0.05]
            if index < rotations.count {
                tileView.transform = CGAffineTransform(rotationAngle: rotations[index])
            }
            tileView.layer.cornerRadius = 8
            tileView.layer.shadowColor = UIColor.black.cgColor
            tileView.layer.shadowOffset = CGSize(width: 0, height: 2)
            tileView.layer.shadowOpacity = 0.3
            tileView.layer.shadowRadius = 4
            
        case "Film Strip 4":
            tileView.layer.cornerRadius = 2
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –∫–∞–∫ –¥–µ–∫–æ—Ä–∞—Ü–∏—é
            tileView.layer.borderWidth = 2
            tileView.layer.borderColor = UIColor.darkGray.cgColor
            
        case "Plus 5", "Star 5":
            if index == 2 { // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è
                tileView.layer.cornerRadius = min(tileView.bounds.width, tileView.bounds.height) / 2
            } else {
                tileView.layer.cornerRadius = 8
            }
            
        case "Hexagon 6":
            // –°–æ–∑–¥–∞–µ–º —à–µ—Å—Ç–∏—É–≥–æ–ª—å–Ω—É—é –º–∞—Å–∫—É
            let hexagonPath = UIBezierPath()
            let bounds = tileView.bounds
            let center = CGPoint(x: bounds.midX, y: bounds.midY)
            let radius = min(bounds.width, bounds.height) / 2.5
            
            for i in 0..<6 {
                let angle = CGFloat(i) * .pi / 3
                let point = CGPoint(
                    x: center.x + radius * cos(angle),
                    y: center.y + radius * sin(angle)
                )
                if i == 0 {
                    hexagonPath.move(to: point)
                } else {
                    hexagonPath.addLine(to: point)
                }
            }
            hexagonPath.close()
            
            let maskLayer = CAShapeLayer()
            maskLayer.path = hexagonPath.cgPath
            tileView.layer.mask = maskLayer
            
        default:
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å
            tileView.layer.cornerRadius = 4.0
        }
    }
    
    private func presentImagePicker() {
        let imagePickerController = UIImagePickerController()
        imagePickerController.delegate = self
        imagePickerController.sourceType = .photoLibrary
        imagePickerController.allowsEditing = false
        present(imagePickerController, animated: true, completion: nil)
    }
    
    // MARK: - Collage View Setup
    
    /// Configures the collage view based on the provided template.
    /// The preview displays a grid of square tiles with white borders and placeholder images,
    /// centered in collageView. Special templates (2x2 grid with one tile stretched) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è.
    private func setupCollageView(with template: CollageTemplate) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–ª–ª–∞–∂, –∫—Ä–æ–º–µ backgroundImageView
        collageView.subviews.forEach { subview in
            if subview !== backgroundImageView {
                subview.removeFromSuperview()
            }
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        currentColumnWidths.removeAll()
        currentRowHeights.removeAll()
        
        // Force layout update to obtain correct bounds.
        view.layoutIfNeeded()
        print("Setting up collage view with template: \(template.name)")
        
        // Define margins.
        let outerMargin: CGFloat = 16
        let innerMargin: CGFloat = 8
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–±–ª–æ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º.
        let specialTemplates = ["Left Tall, Right Two", "Right Tall, Left Two", "Top Long, Bottom Two", "Bottom Long, Top Two"]
        let _ = ["Wave Split 2", "Curve Split 2", "Zigzag 2", "Triangle 3", "Fan 3", "Steps 3", 
                 "Diamond 4", "Windmill 4", "Pyramid 4", "Spiral 4", "Heart 7", "Circle 4", 
                 "Puzzle 4", "Film Strip 4", "Plus 5", "Star 5", "Hexagon 6", "Flower 6", 
                 "Octagon 8", "Polaroid Stack", "Scattered Photos"]
        
        let columns: Int
        let rows: Int
        if specialTemplates.contains(template.name) {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å—á–∏—Ç–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ—Ç–∫—É 2x2.
            columns = 2
            rows = 2
        } else {
            columns = (template.positions.map { $0.0 }.max() ?? 0) + 1
            rows = (template.positions.map { $0.1 }.max() ?? 0) + 1
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä collageView –∏ —Å–æ–∑–¥–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å
        let containerWidth = collageView.bounds.width > 0 ? collageView.bounds.width : 200
        let containerHeight = collageView.bounds.height > 0 ? collageView.bounds.height : 200
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –º–∏–Ω—É—Å –æ—Ç—Å—Ç—É–ø—ã)
        let maxAvailableSize = min(containerWidth, containerHeight) - 2 * outerMargin
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–∏—Ç–∫–∏ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–∏
        let totalHorizontalSpacing = innerMargin * CGFloat(columns - 1)
        let totalVerticalSpacing = innerMargin * CGFloat(rows - 1)
        let tileSide = min((maxAvailableSize - totalHorizontalSpacing) / CGFloat(columns),
                           (maxAvailableSize - totalVerticalSpacing) / CGFloat(rows))
        
        // –†–∞–∑–º–µ—Ä –≤—Å–µ–π —Å–µ—Ç–∫–∏ (–∫–≤–∞–¥—Ä–∞—Ç).
        let gridContentWidth = CGFloat(columns) * tileSide + totalHorizontalSpacing
        let gridContentHeight = CGFloat(rows) * tileSide + totalVerticalSpacing
        let gridSize = max(gridContentWidth, gridContentHeight) + 2 * outerMargin
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∞–º–æ–º –Ω–∏–∑—É —Å—Ç–µ–∫–∞
        collageView.sendSubviewToBack(backgroundImageView)
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–µ—Ç–∫–∏ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –≤ collageView.
        let gridContainer = UIView()
        gridContainer.backgroundColor = .clear
        gridContainer.layer.borderColor = UIColor.lightGray.cgColor
        gridContainer.layer.borderWidth = 1
        gridContainer.layer.cornerRadius = 8
        gridContainer.tag = gridContainerTag
        collageView.addSubview(gridContainer)
        gridContainer.snp.makeConstraints { make in
            make.center.equalToSuperview()
            make.width.height.equalTo(gridSize) // –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ
        let contentOffsetX = (gridSize - gridContentWidth) / 2
        let contentOffsetY = (gridSize - gridContentHeight) / 2
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞ —Å–æ–∑–¥–∞–µ–º tileView.
        for (index, position) in template.positions.enumerated() {
            let col = CGFloat(position.0)
            let row = CGFloat(position.1)
            
            // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç: –∫–∞–∂–¥–∞—è –ø–ª–∏—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            var tileFrame = CGRect(x: contentOffsetX + col * (tileSide + innerMargin),
                                   y: contentOffsetY + row * (tileSide + innerMargin),
                                   width: tileSide,
                                   height: tileSide)
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤:
            if template.name == "Left Tall, Right Two" && position == (0, 0) {
                // –õ–µ–≤–∞—è –ø–ª–∏—Ç–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ –≤—ã—Å–æ—Ç–µ (–∑–∞–Ω–∏–º–∞–µ—Ç 2 —Ä—è–¥–∞).
                tileFrame.size.height = tileSide * 2 + innerMargin
            } else if template.name == "Right Tall, Left Two" && position == (1, 0) {
                tileFrame.size.height = tileSide * 2 + innerMargin
            } else if template.name == "Top Long, Bottom Two" && position == (0, 0) {
                // –í–µ—Ä—Ö–Ω—è—è –ø–ª–∏—Ç–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –ø–æ —à–∏—Ä–∏–Ω–µ (–∑–∞–Ω–∏–º–∞–µ—Ç 2 —Å—Ç–æ–ª–±—Ü–∞).
                tileFrame.size.width = tileSide * 2 + innerMargin
            } else if template.name == "Bottom Long, Top Two" && position == (0, 1) {
                tileFrame.size.width = tileSide * 2 + innerMargin
            }
            
            let tileView = UIView()
            tileView.backgroundColor = .clear
            tileView.layer.borderColor = UIColor.white.cgColor
            tileView.layer.borderWidth = 1.0
            tileView.clipsToBounds = true
            tileView.tag = index // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ constraints
            DispatchQueue.main.async {
                self.applyCreativeStyle(to: tileView, template: template, position: position, index: index)
            }
            
            // –°–æ–∑–¥–∞–µ–º imageView –¥–ª—è placeholder.
            let imageView = UIImageView()
            imageView.contentMode = .scaleAspectFill
            imageView.backgroundColor = .clear
            if let placeholder = UIImage(named: "placeholder") {
                imageView.image = placeholder
            }
            tileView.addSubview(imageView)
            imageView.snp.makeConstraints { make in
                make.edges.equalToSuperview()
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            tileView.isUserInteractionEnabled = true
            imageView.isUserInteractionEnabled = true
            
            gridContainer.addSubview(tileView)
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º constraints –¥–ª—è –ø–ª–∏—Ç–∫–∏
            tileView.snp.makeConstraints { make in
                make.left.equalToSuperview().offset(tileFrame.origin.x)
                make.top.equalToSuperview().offset(tileFrame.origin.y)
                make.width.equalTo(tileFrame.size.width)
                make.height.equalTo(tileFrame.size.height)
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        initializeGridSizes(for: template, containerSize: CGSize(width: maxAvailableSize, height: maxAvailableSize))
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥–µ—Ä—ã –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        setupResizableSliders(for: template, in: gridContainer)
    }
    
    // MARK: - Bindings
    
    private func setupBindings() {
        viewModel.saveButtonEnabled
            .bind(to: saveButton.rx.isEnabled)
            .disposed(by: disposeBag)
        
        saveButton.rx.tap
            .subscribe(onNext: { [weak self] in
                print("Save button tapped")
                self?.saveCollage()
            })
            .disposed(by: disposeBag)
        
        addTextButton.rx.tap
            .subscribe(onNext: { [weak self] in
                self?.addTextLayer()
            })
            .disposed(by: disposeBag)
        
        addStickerButton.rx.tap
            .subscribe(onNext: { [weak self] in
                self?.showStickerPicker()
            })
            .disposed(by: disposeBag)
        
        changeBackgroundButton.rx.tap
            .subscribe(onNext: { [weak self] in
                self?.changeBackground()
            })
            .disposed(by: disposeBag)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–∑—É–Ω–∫–∞ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
        cornerRadiusSlider.rx.value
            .skip(1) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            .subscribe(onNext: { [weak self] value in
                self?.updateCornerRadius(CGFloat(value))
            })
            .disposed(by: disposeBag)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª–∑—É–Ω–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        spacingSlider.rx.value
            .skip(1) // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            .subscribe(onNext: { [weak self] value in
                self?.updateSpacing(CGFloat(value))
            })
            .disposed(by: disposeBag)
    }
    
    // MARK: - Grid Size Management
    
    private func initializeGridSizes(for template: CollageTemplate, containerSize: CGSize) {
        let outerMargin: CGFloat = 16
        let innerMargin: CGFloat = 8
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        let columns = (template.positions.map { $0.0 }.max() ?? 0) + 1
        let rows = (template.positions.map { $0.1 }.max() ?? 0) + 1
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        let availableWidth = containerSize.width - 2 * outerMargin - CGFloat(columns - 1) * innerMargin
        let availableHeight = containerSize.height - 2 * outerMargin - CGFloat(rows - 1) * innerMargin
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        let baseColumnWidth = availableWidth / CGFloat(columns)
        let baseRowHeight = availableHeight / CGFloat(rows)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã —Ä–∞–∑–º–µ—Ä–æ–≤
        currentColumnWidths = Array(repeating: baseColumnWidth, count: columns)
        currentRowHeights = Array(repeating: baseRowHeight, count: rows)
    }
    
    // MARK: - Border Drag Views
    
    private func setupResizableSliders(for template: CollageTemplate, in gridContainer: UIView) {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        borderViews.forEach { $0.removeFromSuperview() }
        borderViews.removeAll()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≥–¥–µ –Ω—É–∂–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã (–º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏)
        for i in 0..<template.positions.count {
            for j in (i+1)..<template.positions.count {
                let pos1 = template.positions[i]
                let pos2 = template.positions[j]
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —Ñ–æ—Ç–æ —Å–æ—Å–µ–¥–Ω–∏–º–∏
                let isHorizontalNeighbors = abs(pos1.0 - pos2.0) == 1 && pos1.1 == pos2.1
                let isVerticalNeighbors = abs(pos1.1 - pos2.1) == 1 && pos1.0 == pos2.0
                
                if isHorizontalNeighbors || isVerticalNeighbors {
                    guard let tile1 = gridContainer.viewWithTag(i),
                          let tile2 = gridContainer.viewWithTag(j) else { continue }
                    
                    let borderView = BorderDragView()
                    borderView.isVertical = isHorizontalNeighbors
                    borderView.delegate = self
                    borderView.tag = i * 100 + j // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    
                    gridContainer.addSubview(borderView)
                    
                    if isHorizontalNeighbors {
                        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
                        borderView.snp.makeConstraints { make in
                            make.leading.equalTo(tile1.snp.trailing)
                            make.trailing.equalTo(tile2.snp.leading)
                            make.top.equalTo(tile1.snp.top)
                            make.bottom.equalTo(tile1.snp.bottom)
                        }
                    } else {
                        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
                        borderView.snp.makeConstraints { make in
                            make.top.equalTo(tile1.snp.bottom)
                            make.bottom.equalTo(tile2.snp.top)
                            make.leading.equalTo(tile1.snp.leading)
                            make.trailing.equalTo(tile1.snp.trailing)
                        }
                    }
                    
                    borderViews.append(borderView)
                }
            }
        }
    }
    
    // MARK: - Text Layers
    
    private func addTextLayer() {
        // –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        let centerX = collageView.bounds.width / 2 - 100
        let centerY = collageView.bounds.height / 2 - 25
        
        let textLayer = TextLayerView(frame: CGRect(x: centerX, y: centerY, width: 200, height: 50))
        textLayer.onDelete = { [weak self] in
            self?.removeTextLayer(textLayer)
        }
        textLayer.onTap = { [weak self] in
            self?.selectTextLayer(textLayer)
        }
        
        collageView.addSubview(textLayer)
        textLayers.append(textLayer)
        selectTextLayer(textLayer)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    private func changeBackground() {
        let backgroundPicker = BackgroundPickerViewController()
        backgroundPicker.delegate = self
        backgroundPicker.modalPresentationStyle = .overFullScreen
        backgroundPicker.modalTransitionStyle = .crossDissolve
        
        present(backgroundPicker, animated: true, completion: nil)
    }
    
    private func selectTextLayer(_ textLayer: TextLayerView) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–ª–æ–µ–≤
        textLayers.forEach { $0.setSelected(false) }
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gestureHandlers.forEach { $0.setSelected(false) }
        selectedImageView = nil
        
        // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π
        textLayer.setSelected(true)
        currentTextLayer = textLayer
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        showTextEditingPanel(for: textLayer)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    private func removeTextLayer(_ textLayer: TextLayerView) {
        textLayer.removeFromSuperview()
        if let index = textLayers.firstIndex(of: textLayer) {
            textLayers.remove(at: index)
        }
        if currentTextLayer == textLayer {
            currentTextLayer = nil
            hideTextEditingPanel()
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    /// –°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–ª–æ–µ–≤
    private func deselectAllTextLayers() {
        textLayers.forEach { $0.setSelected(false) }
        currentTextLayer = nil
        hideTextEditingPanel()
    }
    
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∂–µ—Å—Ç –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ —Ç–∞–ø–µ –Ω–∞ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
    private func setupCollageViewTapGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(collageViewTapped(_:)))
        tapGesture.cancelsTouchesInView = false
        collageView.addGestureRecognizer(tapGesture)
    }
    
    @objc private func collageViewTapped(_ gesture: UITapGestureRecognizer) {
        let location = gesture.location(in: collageView)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
        var hitTextLayer = false
        for textLayer in textLayers {
            if textLayer.frame.contains(location) {
                hitTextLayer = true
                break
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –≤ –∫–∞–∫–æ–π-—Ç–æ —Å—Ç–∏–∫–µ—Ä
        var hitSticker = false
        for stickerView in stickerViews {
            if stickerView.frame.contains(location) {
                hitSticker = true
                break
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ø–∞–ª–∏ –ª–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        guard let gridContainer = collageView.viewWithTag(gridContainerTag) else { return }
        let locationInGrid = collageView.convert(location, to: gridContainer)
        var hitImage = false
        for subview in gridContainer.subviews {
            if subview.frame.contains(locationInGrid) && subview.tag < 1000 {
                hitImage = true
                break
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ —Ç–µ–∫—Å—Ç, –Ω–∏ –≤ —Å—Ç–∏–∫–µ—Ä, –Ω–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–Ω–∏–º–∞–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if !hitTextLayer && !hitSticker && !hitImage {
            deselectAllTextLayers()
            deselectAllStickers()
            gestureHandlers.forEach { $0.setSelected(false) }
            selectedImageView = nil
        }
    }
    
    private func showTextEditingPanel(for textLayer: TextLayerView) {
        hideTextEditingPanel()
        
        let panel = TextEditingPanel()
        panel.delegate = self
        view.addSubview(panel)
        
        // –ü–∞–Ω–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        panel.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        panel.show(with: textLayer.archTextView.text)
        textEditingPanel = panel
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏
        ensureButtonsOnTop()
    }
    
    private func hideTextEditingPanel() {
        textEditingPanel?.hide()
        textEditingPanel = nil
    }
    
    // MARK: - Save Collage
    
    /// Captures snapshots of each tile (with applied transformations) and draws them into the final collage image with white borders.
    private func saveCollage() {
        guard let template = viewModel.collageTemplate.value else {
            print("No template available")
            return
        }
        
        // Final collage image size: 2400 x 2400 pixels (–∫–≤–∞–¥—Ä–∞—Ç).
        let finalCollageSize = CGSize(width: 2400, height: 2400)
        
        // –ü–æ–ª—É—á–∞–µ–º gridContainer –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        guard let gridContainer = collageView.viewWithTag(gridContainerTag) else {
            print("Failed to retrieve grid container")
            return
        }
        gridContainer.layoutIfNeeded()
        
        // Begin final collage image context.
        UIGraphicsBeginImageContextWithOptions(finalCollageSize, false, 0)
        guard let context = UIGraphicsGetCurrentContext() else {
            print("Failed to get graphics context")
            return
        }
        defer { UIGraphicsEndImageContext() }
        
        // –†–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        if let backgroundImage = backgroundImageView.image {
            // –†–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞—Å—Ç—è–≥–∏–≤–∞—è –µ–≥–æ –Ω–∞ –≤–µ—Å—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            backgroundImage.draw(in: CGRect(origin: .zero, size: finalCollageSize))
        } else if let backgroundColor = backgroundImageView.backgroundColor, backgroundColor != .clear {
            // –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω, –∑–∞–ª–∏–≤–∞–µ–º —ç—Ç–∏–º —Ü–≤–µ—Ç–æ–º
            backgroundColor.setFill()
            context.fill(CGRect(origin: .zero, size: finalCollageSize))
        } else {
            // –ï—Å–ª–∏ —Ñ–æ–Ω–∞ –Ω–µ—Ç, –∑–∞–ª–∏–≤–∞–µ–º –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º
            UIColor.white.setFill()
            context.fill(CGRect(origin: .zero, size: finalCollageSize))
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ
        let currentGridSize = gridContainer.bounds.size
        let scale = finalCollageSize.width / max(currentGridSize.width, currentGridSize.height)
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ
        let offsetX = (finalCollageSize.width - currentGridSize.width * scale) / 2
        let offsetY = (finalCollageSize.height - currentGridSize.height * scale) / 2
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏—è —É–≥–ª–æ–≤
        let currentCornerRadius = CGFloat(cornerRadiusSlider.value)
        
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —à–∞–±–ª–æ–Ω–∞.
        for (index, _) in template.positions.enumerated() {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–ª–∏—Ç–∫—É –∏–∑ UI
            guard let tileView = gridContainer.subviews[safe: index],
                  let imageView = tileView.subviews.first as? UIImageView
            else {
                print("Failed to retrieve tile view or image view for index \(index)")
                continue
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
            guard let image = imageView.image else { continue }
            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–µ–π–º –ø–ª–∏—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ gridContainer
            let tileFrame = tileView.frame
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ—Ä–µ–π–º –ø–ª–∏—Ç–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let scaledTileFrame = CGRect(
                x: tileFrame.origin.x * scale + offsetX,
                y: tileFrame.origin.y * scale + offsetY,
                width: tileFrame.width * scale,
                height: tileFrame.height * scale
            )
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.saveGState()
            
            // –°–æ–∑–¥–∞–µ–º clipping path —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
            let roundedPath = UIBezierPath(roundedRect: scaledTileFrame, cornerRadius: currentCornerRadius * scale)
            roundedPath.addClip()
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ü–µ–Ω—Ç—Ä –ø–ª–∏—Ç–∫–∏
            let tileCenter = CGPoint(x: scaledTileFrame.midX, y: scaledTileFrame.midY)
            context.translateBy(x: tileCenter.x, y: tileCenter.y)
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–∞—Å—à—Ç–∞–±, –ø–æ–≤–æ—Ä–æ—Ç, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ)
            let imageTransform = imageView.transform
            context.concatenate(imageTransform)
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º contentMode (scaleAspectFill)
            let imageSize = image.size
            let tileSize = tileFrame.size
            
            // –î–ª—è scaleAspectFill –Ω–∞—Ö–æ–¥–∏–º –º–∞—Å—à—Ç–∞–±, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –ø–ª–∏—Ç–∫—É
            let scaleX = tileSize.width / imageSize.width
            let scaleY = tileSize.height / imageSize.height
            let aspectFillScale = max(scaleX, scaleY)
            
            // –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            let scaledImageSize = CGSize(
                width: imageSize.width * aspectFillScale * scale,
                height: imageSize.height * aspectFillScale * scale
            )
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É –ø–ª–∏—Ç–∫–∏
            let imageRect = CGRect(
                x: -scaledImageSize.width / 2,
                y: -scaledImageSize.height / 2,
                width: scaledImageSize.width,
                height: scaledImageSize.height
            )
            
            image.draw(in: imageRect)
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context.restoreGState()
            
            // –†–∏—Å—É–µ–º –±–µ–ª—É—é —Ä–∞–º–∫—É –ø–æ–≤–µ—Ä—Ö —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
            let borderPath = UIBezierPath(roundedRect: scaledTileFrame, cornerRadius: currentCornerRadius * scale)
            UIColor.white.setStroke()
            borderPath.lineWidth = 2.0 * scale
            borderPath.stroke()
        }
        
        // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ª–æ–∏ –ø–æ–≤–µ—Ä—Ö –∫–æ–ª–ª–∞–∂–∞
        for textLayer in textLayers {
            context.saveGState()

            // 1. –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä —Å–ª–æ—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let centerInGrid = collageView.convert(textLayer.center, to: gridContainer)
            let scaledCenter = CGPoint(
                x: centerInGrid.x * scale + offsetX,
                y: centerInGrid.y * scale + offsetY
            )
            
            // 2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ—Ç —Ü–µ–Ω—Ç—Ä
            context.translateBy(x: scaledCenter.x, y: scaledCenter.y)

            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ª–æ—è, –æ—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –æ–±—â–∏–π –º–∞—Å—à—Ç–∞–± –∫–æ–ª–ª–∞–∂–∞
            let finalTransform = textLayer.transform.scaledBy(x: scale, y: scale)
            context.concatenate(finalTransform)
            
            // 4. –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
            // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –º–∞—Å—à—Ç–∞–±–µ –∏ –ø–æ–≤–æ—Ä–æ—Ç–µ.
            let attributes: [NSAttributedString.Key: Any] = [
                .font: textLayer.archTextView.font,
                .foregroundColor: textLayer.archTextView.textColor
            ]
            
            let text = textLayer.archTextView.text
            let textSize = text.size(withAttributes: attributes)
            
            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç, —Ü–µ–Ω—Ç—Ä–∏—Ä—É—è –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏ (–∫–æ—Ç–æ—Ä–∞—è —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–æ–º —Å–ª–æ—è)
            let textRect = CGRect(
                x: -textSize.width / 2,
                y: -textSize.height / 2,
                width: textSize.width,
                height: textSize.height
            )
            
            text.draw(in: textRect, withAttributes: attributes)
            
            context.restoreGState()
        }
        
        // –†–∏—Å—É–µ–º —Å—Ç–∏–∫–µ—Ä—ã –ø–æ–≤–µ—Ä—Ö –∫–æ–ª–ª–∞–∂–∞
        for stickerView in stickerViews {
            context.saveGState()
            
            // 1. –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let centerInGrid = collageView.convert(stickerView.center, to: gridContainer)
            let scaledCenter = CGPoint(
                x: centerInGrid.x * scale + offsetX,
                y: centerInGrid.y * scale + offsetY
            )
            
            // 2. –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ—Ç —Ü–µ–Ω—Ç—Ä
            context.translateBy(x: scaledCenter.x, y: scaledCenter.y)
            
            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ç–∏–∫–µ—Ä–∞, –æ—Ç–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –æ–±—â–∏–π –º–∞—Å—à—Ç–∞–± –∫–æ–ª–ª–∞–∂–∞
            let finalTransform = stickerView.transform.scaledBy(x: scale, y: scale)
            context.concatenate(finalTransform)
            
            // 4. –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞
            if let stickerImage = stickerView.subviews.first(where: { $0 is UIImageView }) as? UIImageView,
               let image = stickerImage.image {
                
                // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∏–∫–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
                let stickerSize = stickerView.bounds.size
                let scaledStickerSize = CGSize(
                    width: stickerSize.width,
                    height: stickerSize.height
                )
                
                // –†–∏—Å—É–µ–º —Å—Ç–∏–∫–µ—Ä, —Ü–µ–Ω—Ç—Ä–∏—Ä—É—è –µ–≥–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π —Ç–æ—á–∫–∏
                let stickerRect = CGRect(
                    x: -scaledStickerSize.width / 2,
                    y: -scaledStickerSize.height / 2,
                    width: scaledStickerSize.width,
                    height: scaledStickerSize.height
                )
                
                image.draw(in: stickerRect)
            }
            
            context.restoreGState()
        }
        
        if let finalImage = UIGraphicsGetImageFromCurrentImageContext() {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º
            UIImageWriteToSavedPhotosAlbum(finalImage, self, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            let templateName = viewModel.collageTemplate.value?.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω"
            let savedCollage = SavedCollage(image: finalImage, templateName: templateName)
            SavedCollagesManager.shared.saveCollage(savedCollage)
            
            print("Final collage image saved successfully!")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            showSaveSuccessAlert()
        } else {
            print("Failed to generate final collage image")
        }
    }

    @objc private func image(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {
        if let error = error {
            print("Error saving collage image: \(error.localizedDescription)")
        } else {
            print("Collage image saved successfully!")
        }
    }
    
    private func showSaveSuccessAlert() {
        let alert = UIAlertController(
            title: "–ö–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            message: "–í–∞—à –∫–æ–ª–ª–∞–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞–ª–µ—Ä–µ—é –∏ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–∞–ª–µ—Ä–µ—é", style: .default) { [weak self] _ in
            self?.coordinator?.showGallery()
        })
        
        alert.addAction(UIAlertAction(title: "OK", style: .cancel))
        
        present(alert, animated: true)
    }
    
    // MARK: - Slider Methods
    
    private func updateCornerRadius(_ radius: CGFloat) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
        cornerRadiusLabel.text = "–ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ: \(Int(radius))"
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –ø–ª–∏—Ç–∫–∞–º
        guard let gridContainer = collageView.viewWithTag(gridContainerTag) else { return }
        
        for subview in gridContainer.subviews {
            if subview.tag < 1000 { // –¢–æ–ª—å–∫–æ –ø–ª–∏—Ç–∫–∏, –Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ view
                subview.layer.cornerRadius = radius
            }
        }
    }
    
    private func updateSpacing(_ spacing: CGFloat) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª
        spacingLabel.text = "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: \(Int(spacing))"
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        currentInnerMargin = spacing
        
        // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º layout –∫–æ–ª–ª–∞–∂–∞ —Å –Ω–æ–≤—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
        if let template = viewModel.collageTemplate.value {
            rebuildCollageLayout(with: template, newInnerMargin: spacing)
        }
    }
    
    private func rebuildCollageLayout(with template: CollageTemplate, newInnerMargin: CGFloat) {
        guard let gridContainer = collageView.viewWithTag(gridContainerTag) else { return }
        
        let outerMargin: CGFloat = 16
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        let specialTemplates = ["Left Tall, Right Two", "Right Tall, Left Two", "Top Long, Bottom Two", "Bottom Long, Top Two"]
        let columns: Int
        let rows: Int
        if specialTemplates.contains(template.name) {
            columns = 2
            rows = 2
        } else {
            columns = (template.positions.map { $0.0 }.max() ?? 0) + 1
            rows = (template.positions.map { $0.1 }.max() ?? 0) + 1
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä collageView
        let containerWidth = collageView.bounds.width > 0 ? collageView.bounds.width : 200
        let containerHeight = collageView.bounds.height > 0 ? collageView.bounds.height : 200
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        let maxAvailableSize = min(containerWidth, containerHeight) - 2 * outerMargin
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ø–ª–∏—Ç–∫–∏ —Å –Ω–æ–≤—ã–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º
        let totalHorizontalSpacing = newInnerMargin * CGFloat(columns - 1)
        let totalVerticalSpacing = newInnerMargin * CGFloat(rows - 1)
        let tileSide = min((maxAvailableSize - totalHorizontalSpacing) / CGFloat(columns),
                           (maxAvailableSize - totalVerticalSpacing) / CGFloat(rows))
        
        // –†–∞–∑–º–µ—Ä –≤—Å–µ–π —Å–µ—Ç–∫–∏
        let gridContentWidth = CGFloat(columns) * tileSide + totalHorizontalSpacing
        let gridContentHeight = CGFloat(rows) * tileSide + totalVerticalSpacing
        let gridSize = max(gridContentWidth, gridContentHeight) + 2 * outerMargin
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä gridContainer
        gridContainer.snp.updateConstraints { make in
            make.width.height.equalTo(gridSize)
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ
        let contentOffsetX = (gridSize - gridContentWidth) / 2
        let contentOffsetY = (gridSize - gridContentHeight) / 2
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –ø–ª–∏—Ç–æ–∫
        for (index, position) in template.positions.enumerated() {
            guard let tileView = gridContainer.subviews[safe: index] else { continue }
            
            let col = CGFloat(position.0)
            let row = CGFloat(position.1)
            
            // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            var tileFrame = CGRect(x: contentOffsetX + col * (tileSide + newInnerMargin),
                                   y: contentOffsetY + row * (tileSide + newInnerMargin),
                                   width: tileSide,
                                   height: tileSide)
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
            if template.name == "Left Tall, Right Two" && position == (0, 0) {
                tileFrame.size.height = tileSide * 2 + newInnerMargin
            } else if template.name == "Right Tall, Left Two" && position == (1, 0) {
                tileFrame.size.height = tileSide * 2 + newInnerMargin
            } else if template.name == "Top Long, Bottom Two" && position == (0, 0) {
                tileFrame.size.width = tileSide * 2 + newInnerMargin
            } else if template.name == "Bottom Long, Top Two" && position == (0, 1) {
                tileFrame.size.width = tileSide * 2 + newInnerMargin
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º constraints –ø–ª–∏—Ç–∫–∏
            tileView.snp.remakeConstraints { make in
                make.left.equalToSuperview().offset(tileFrame.origin.x)
                make.top.equalToSuperview().offset(tileFrame.origin.y)
                make.width.equalTo(tileFrame.size.width)
                make.height.equalTo(tileFrame.size.height)
            }
        }
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    // MARK: - Helper Methods
    
    private func constrainImageViewToEditingArea(_ imageView: UIImageView) {
        guard let editingArea = collageView.viewWithTag(1000) else { return }
        
        let editingBounds = editingArea.bounds
        let imageFrame = imageView.frame
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        var constrainedFrame = imageFrame
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ X
        if imageFrame.minX < editingBounds.minX {
            constrainedFrame.origin.x = editingBounds.minX
        } else if imageFrame.maxX > editingBounds.maxX {
            constrainedFrame.origin.x = editingBounds.maxX - imageFrame.width
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ Y
        if imageFrame.minY < editingBounds.minY {
            constrainedFrame.origin.y = editingBounds.minY
        } else if imageFrame.maxY > editingBounds.maxY {
            constrainedFrame.origin.y = editingBounds.maxY - imageFrame.height
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        if !constrainedFrame.equalTo(imageFrame) {
            imageView.frame = constrainedFrame
        }
    }
    
    // MARK: - Model Synchronization
    
    private func initializeViewModelWithSelectedPhotos() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º selectedPhotos —Å viewModel.selectedImages
        for (index, photo) in selectedPhotos.enumerated() {
            let indexPath = IndexPath(item: index, section: 0)
            if photo.size != .zero { // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏
                viewModel.setImage(at: indexPath, image: photo)
            }
        }
    }
}
// MARK: - UIScrollViewDelegate
extension CollageEditorViewController: UIScrollViewDelegate {
    func viewForZooming(in scrollView: UIScrollView) -> UIView? {
        // –í –¥–∞–Ω–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –≤ tileView –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å UIScrollView,
        // –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º nil –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å imageView, –µ—Å–ª–∏ tileView —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ.
        return nil
    }
}

extension UIImage {
    /// Returns an image transformed by the given transform and resized to the specified size.
    func transformed(with transform: CGAffineTransform, size: CGSize) -> UIImage? {
        UIGraphicsBeginImageContextWithOptions(size, false, self.scale)
        defer { UIGraphicsEndImageContext() }
        guard let context = UIGraphicsGetCurrentContext() else { return nil }
        context.concatenate(transform)
        self.draw(in: CGRect(origin: .zero, size: size))
        return UIGraphicsGetImageFromCurrentImageContext()
    }
}

extension UIView {
    /// Captures a snapshot of the view's current appearance.
    func snapshot() -> UIImage? {
        UIGraphicsBeginImageContextWithOptions(self.bounds.size, false, UIScreen.main.scale)
        defer { UIGraphicsEndImageContext() }
        if self.drawHierarchy(in: self.bounds, afterScreenUpdates: true) {
            return UIGraphicsGetImageFromCurrentImageContext()
        }
        return nil
    }
}

extension Collection {
    /// Returns the element at the specified index if it exists, otherwise nil.
    subscript(safe index: Index) -> Element? {
        return indices.contains(index) ? self[index] : nil
    }
}

// MARK: - TextEditingPanelDelegate
extension CollageEditorViewController: TextEditingPanelDelegate {
    func textEditingPanel(_ panel: TextEditingPanel, didUpdateText text: String) {
        currentTextLayer?.updateText(text)
    }
    
    func textEditingPanel(_ panel: TextEditingPanel, didSelectColor color: UIColor) {
        currentTextLayer?.updateTextColor(color)
    }
    
    func textEditingPanel(_ panel: TextEditingPanel, didSelectFontSize size: CGFloat) {
        if let currentFont = currentTextLayer?.archTextView.font {
            currentTextLayer?.updateFont(currentFont.withSize(size))
        }
    }
    
    func textEditingPanel(_ panel: TextEditingPanel, didSelectFont fontName: String) {
        currentTextLayer?.updateFontByName(fontName)
    }
    

    
    func textEditingPanelDidFinish(_ panel: TextEditingPanel) {
        hideTextEditingPanel()
        currentTextLayer?.setSelected(false)
        currentTextLayer = nil
    }
}

// MARK: - BorderDragViewDelegate
extension CollageEditorViewController: BorderDragViewDelegate {
    func borderDragView(_ view: BorderDragView, didChangeRatio ratio: CGFloat) {
        guard let gridContainer = collageView.viewWithTag(gridContainerTag),
              let template = viewModel.collageTemplate.value else { return }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–ª–∏—Ç–æ–∫ –∏–∑ —Ç–µ–≥–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        let index1 = view.tag / 100
        let index2 = view.tag % 100
        
        let pos1 = template.positions[index1]
        let pos2 = template.positions[index2]
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        let isHorizontal = pos1.1 == pos2.1
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ–π —Å–µ—Ç–∫–∏
        recalculateGridLayout(template: template, 
                            gridContainer: gridContainer, 
                            changedIndex1: index1, 
                            changedIndex2: index2, 
                            ratio: ratio, 
                            isHorizontal: isHorizontal)
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        UIView.animate(withDuration: 0.1, delay: 0, options: [.allowUserInteraction, .beginFromCurrentState], animations: {
            gridContainer.layoutIfNeeded()
        })
    }
    
    private func recalculateGridLayout(template: CollageTemplate, 
                                     gridContainer: UIView, 
                                     changedIndex1: Int, 
                                     changedIndex2: Int, 
                                     ratio: CGFloat, 
                                     isHorizontal: Bool) {
        
        let outerMargin: CGFloat = 16
        let innerMargin: CGFloat = 8
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å –Ω—É–ª—è
        var columnWidths = currentColumnWidths
        var rowHeights = currentRowHeights
        
        // –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤—ã –ø—É—Å—Ç—ã–µ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö
        if columnWidths.isEmpty || rowHeights.isEmpty {
            let containerSize = gridContainer.bounds.size
            initializeGridSizes(for: template, containerSize: containerSize)
            columnWidths = currentColumnWidths
            rowHeights = currentRowHeights
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—ã –ø–ª–∏—Ç–æ–∫
        let pos1 = template.positions[changedIndex1]
        let pos2 = template.positions[changedIndex2]
        
        if isHorizontal {
            // –ò–∑–º–µ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            let totalWidth = columnWidths[pos1.0] + columnWidths[pos2.0]
            columnWidths[pos1.0] = totalWidth * ratio
            columnWidths[pos2.0] = totalWidth * (1 - ratio)
        } else {
            // –ò–∑–º–µ–Ω—è–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
            let totalHeight = rowHeights[pos1.1] + rowHeights[pos2.1]
            rowHeights[pos1.1] = totalHeight * ratio
            rowHeights[pos2.1] = totalHeight * (1 - ratio)
        }
        
        // –í–ê–ñ–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é —Ñ–æ—Ä–º—É —Å–µ—Ç–∫–∏
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        let totalGridWidth = columnWidths.reduce(0, +) + innerMargin * CGFloat(columnWidths.count - 1)
        let totalGridHeight = rowHeights.reduce(0, +) + innerMargin * CGFloat(rowHeights.count - 1)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
        let maxAvailableSize = min(collageView.bounds.width, collageView.bounds.height) - 2 * outerMargin
        let currentMaxSize = max(totalGridWidth, totalGridHeight)
        
        // –ï—Å–ª–∏ —Å–µ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –Ω–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        if currentMaxSize > maxAvailableSize {
            let scale = maxAvailableSize / currentMaxSize
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Ä–∞–∑–º–µ—Ä–∞–º
            for i in 0..<columnWidths.count {
                columnWidths[i] *= scale
            }
            for i in 0..<rowHeights.count {
                rowHeights[i] *= scale
            }
        }
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–µ—Ç–∫–∏
        let finalGridWidth = outerMargin * 2 + columnWidths.reduce(0, +) + innerMargin * CGFloat(columnWidths.count - 1)
        let finalGridHeight = outerMargin * 2 + rowHeights.reduce(0, +) + innerMargin * CGFloat(rowHeights.count - 1)
        
        // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é —Ñ–æ—Ä–º—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        let squareSize = max(finalGridWidth, finalGridHeight)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        currentColumnWidths = columnWidths
        currentRowHeights = rowHeights
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä gridContainer –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç
        gridContainer.snp.remakeConstraints { make in
            make.center.equalToSuperview()
            make.width.height.equalTo(squareSize)
        }
        
        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º constraints –¥–ª—è –≤—Å–µ—Ö –ø–ª–∏—Ç–æ–∫
        for (index, position) in template.positions.enumerated() {
            guard let tileView = gridContainer.viewWithTag(index) else { continue }
            
            let col = position.0
            let row = position.1
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–ª–∏—Ç–∫–∏ —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ
            let contentWidth = columnWidths.reduce(0, +) + innerMargin * CGFloat(columnWidths.count - 1)
            let contentHeight = rowHeights.reduce(0, +) + innerMargin * CGFloat(rowHeights.count - 1)
            
            let offsetX = (squareSize - contentWidth) / 2
            let offsetY = (squareSize - contentHeight) / 2
            
            var x: CGFloat = offsetX
            for i in 0..<col {
                x += columnWidths[i] + innerMargin
            }
            
            var y: CGFloat = offsetY
            for i in 0..<row {
                y += rowHeights[i] + innerMargin
            }
            
            let width = columnWidths[col]
            let height = rowHeights[row]
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞—Å—Ç—è–Ω—É—Ç—ã—Ö –ø–ª–∏—Ç–æ–∫
            var finalWidth = width
            var finalHeight = height
            
            if template.name == "Left Tall, Right Two" && position == (0, 0) {
                finalHeight = rowHeights[0] + rowHeights[1] + innerMargin
            } else if template.name == "Right Tall, Left Two" && position == (1, 0) {
                finalHeight = rowHeights[0] + rowHeights[1] + innerMargin
            } else if template.name == "Top Long, Bottom Two" && position == (0, 0) {
                finalWidth = columnWidths[0] + columnWidths[1] + innerMargin
            } else if template.name == "Bottom Long, Top Two" && position == (0, 1) {
                finalWidth = columnWidths[0] + columnWidths[1] + innerMargin
            }
            
            // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º constraints
            tileView.snp.remakeConstraints { make in
                make.left.equalToSuperview().offset(x)
                make.top.equalToSuperview().offset(y)
                make.width.equalTo(finalWidth)
                make.height.equalTo(finalHeight)
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≥—Ä–∞–Ω–∏—Ü
        updateBorderPositions(template: template, gridContainer: gridContainer)
    }
    
    private func updateBorderPositions(template: CollageTemplate, gridContainer: UIView) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö –≥—Ä–∞–Ω–∏—Ü
        for borderView in borderViews {
            let index1 = borderView.tag / 100
            let index2 = borderView.tag % 100
            
            guard let tile1 = gridContainer.viewWithTag(index1),
                  let tile2 = gridContainer.viewWithTag(index2) else { continue }
            
            let pos1 = template.positions[index1]
            let pos2 = template.positions[index2]
            
            let isHorizontalNeighbors = abs(pos1.0 - pos2.0) == 1 && pos1.1 == pos2.1
            
            borderView.snp.remakeConstraints { make in
                if isHorizontalNeighbors {
                    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
                    make.leading.equalTo(tile1.snp.trailing)
                    make.trailing.equalTo(tile2.snp.leading)
                    make.top.equalTo(tile1.snp.top)
                    make.bottom.equalTo(tile1.snp.bottom)
                } else {
                    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
                    make.top.equalTo(tile1.snp.bottom)
                    make.bottom.equalTo(tile2.snp.top)
                    make.leading.equalTo(tile1.snp.leading)
                    make.trailing.equalTo(tile1.snp.trailing)
                }
            }
        }
    }
}

// MARK: - Stickers
extension CollageEditorViewController {
    private func showStickerPicker() {
        let stickerPicker = StickerPickerViewController()
        stickerPicker.delegate = self
        stickerPicker.modalPresentationStyle = .pageSheet
        
        if let sheet = stickerPicker.sheetPresentationController {
            sheet.detents = [.medium(), .large()]
            sheet.prefersGrabberVisible = true
        }
        
        present(stickerPicker, animated: true)
    }
    
    private func addStickerView(with image: UIImage) {
        // –†–∞–∑–º–µ—â–∞–µ–º —Å—Ç–∏–∫–µ—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ–ª–ª–∞–∂–∞
        let centerX = collageView.bounds.width / 2 - 40
        let centerY = collageView.bounds.height / 2 - 40
        
        let stickerView = StickerView(image: image)
        stickerView.frame = CGRect(x: centerX, y: centerY, width: 80, height: 80)
        
        stickerView.onDelete = { [weak self] in
            self?.removeStickerView(stickerView)
        }
        
        stickerView.onTap = { [weak self] in
            self?.selectStickerView(stickerView)
        }
        
        collageView.addSubview(stickerView)
        stickerViews.append(stickerView)
        selectStickerView(stickerView)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    private func selectStickerView(_ stickerView: StickerView) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
        stickerViews.forEach { $0.setSelected(false) }
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–ª–æ–µ–≤
        textLayers.forEach { $0.setSelected(false) }
        currentTextLayer = nil
        hideTextEditingPanel()
        
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        gestureHandlers.forEach { $0.setSelected(false) }
        selectedImageView = nil
        
        // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–∫–µ—Ä
        stickerView.setSelected(true)
        currentStickerView = stickerView
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    private func removeStickerView(_ stickerView: StickerView) {
        stickerView.removeFromSuperview()
        if let index = stickerViews.firstIndex(of: stickerView) {
            stickerViews.remove(at: index)
        }
        if currentStickerView == stickerView {
            currentStickerView = nil
        }
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    /// –°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤
    private func deselectAllStickers() {
        stickerViews.forEach { $0.setSelected(false) }
        currentStickerView = nil
    }
}

// MARK: - StickerPickerDelegate
extension CollageEditorViewController: StickerPickerDelegate {
    func stickerPicker(_ picker: StickerPickerViewController, didSelectSticker image: UIImage) {
        addStickerView(with: image)
    }
}

// MARK: - BackgroundPickerDelegate
extension CollageEditorViewController: BackgroundPickerDelegate {
    func backgroundPicker(_ picker: BackgroundPickerViewController, didSelectColor color: UIColor) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω
        backgroundImageView.image = nil
        backgroundImageView.backgroundColor = color
    }
    
    func backgroundPicker(_ picker: BackgroundPickerViewController, didSelectImage image: UIImage) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ–Ω
        backgroundImageView.backgroundColor = .clear
        backgroundImageView.image = image
    }
    
    func backgroundPickerDidRequestGallery(_ picker: BackgroundPickerViewController) {
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º BackgroundPicker, –∑–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        picker.dismiss(animated: true) { [weak self] in
            DispatchQueue.main.async {
                self?.openImagePickerForBackground()
            }
        }
    }
    
    private func openImagePickerForBackground() {
        let imagePicker = UIImagePickerController()
        imagePicker.delegate = self
        imagePicker.sourceType = .photoLibrary
        imagePicker.allowsEditing = false
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞
        imagePicker.view.tag = 999
        
        present(imagePicker, animated: true, completion: nil)
    }
}

// MARK: - UIImagePickerControllerDelegate
extension CollageEditorViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        picker.dismiss(animated: true) { [weak self] in
            guard let self = self,
                  let selectedImage = info[.originalImage] as? UIImage else { return }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ –ø–∏–∫–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞
            if picker.view.tag == 999 {
                // –ò–∑–º–µ–Ω—è–µ–º —Ñ–æ–Ω –∫–æ–ª–ª–∞–∂–∞
                self.backgroundImageView.image = selectedImage
            } else if let indexPath = self.currentIndexPath {
                // –û–±—ã—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–ª–∏—Ç–∫–µ
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –º–æ–¥–µ–ª–∏
                self.viewModel.setImage(at: indexPath, image: selectedImage)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                self.updateTileWithNewImage(at: indexPath.item, image: selectedImage)
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
                self.currentIndexPath = nil
            }
        }
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        picker.dismiss(animated: true) { [weak self] in
            self?.currentIndexPath = nil
        }
    }
    
    private func updateTileWithNewImage(at index: Int, image: UIImage) {
        guard let gridContainer = collageView.viewWithTag(gridContainerTag),
              index < gridContainer.subviews.count,
              let tileView = gridContainer.subviews[safe: index],
              let imageView = tileView.subviews.first as? UIImageView else { return }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ UI
        imageView.image = image
        imageView.contentMode = .scaleAspectFill
        imageView.backgroundColor = .clear
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º selectedPhotos –º–∞—Å—Å–∏–≤
        if index < selectedPhotos.count {
            selectedPhotos[index] = image
        } else {
            // –†–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            while selectedPhotos.count <= index {
                selectedPhotos.append(UIImage()) // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–ª—É—à–∫–∏
            }
            selectedPhotos[index] = image
        }
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∂–µ—Å—Ç—ã
        imageView.gestureRecognizers?.removeAll()
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–µ—Å—Ç–æ–≤
        let gestureHandler = AdvancedImageGestureHandler(imageView: imageView, containerView: collageView)
        gestureHandler.delegate = self
        gestureHandlers.append(gestureHandler)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        gestureHandler.updateDeleteButtonVisibility()
        
        imageView.isUserInteractionEnabled = true
    }

    // MARK: - Photo Editor Integration
    
    private func openPhotoEditor(with image: UIImage, for imageView: UIImageView) {
        guard image != UIImage(named: "placeholder"),
              let coordinator = coordinator else {
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å PhotoEditor")
            return
        }
        
        print("üé® –û—Ç–∫—Ä—ã–≤–∞–µ–º PhotoEditor –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        coordinator.showPhotoEditor(with: image) { [weak self, weak imageView] editedImage in
            guard let self = self, let imageView = imageView else { return }
            
            if let editedImage = editedImage {
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ PhotoEditor")
                
                // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
                if let tileView = imageView.superview,
                   let gridContainer = self.collageView.viewWithTag(self.gridContainerTag),
                   let index = gridContainer.subviews.firstIndex(of: tileView) {
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ UI
                    imageView.image = editedImage
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
                    let indexPath = IndexPath(item: index, section: 0)
                    self.viewModel.setImage(at: indexPath, image: editedImage)
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º selectedPhotos –º–∞—Å—Å–∏–≤
                    if index < self.selectedPhotos.count {
                        self.selectedPhotos[index] = editedImage
                    }
                    
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ø–æ–∑–∏—Ü–∏–∏ \(index)")
                }
            } else {
                print("‚ÑπÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            }
        }
    }
}

// MARK: - AdvancedImageGestureHandlerDelegate
extension CollageEditorViewController: AdvancedImageGestureHandlerDelegate {
    func gestureHandler(_ handler: AdvancedImageGestureHandler, didUpdateTransform transform: CGAffineTransform, for imageView: UIImageView) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        imageView.transform = transform
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        handler.resetTransformIfNeeded()
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        constrainImageViewToEditingArea(imageView)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    func gestureHandler(_ handler: AdvancedImageGestureHandler, didUpdateFrame frame: CGRect, for imageView: UIImageView) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ñ—Ä–µ–π–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        imageView.frame = frame
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—à–ª–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        handler.resetTransformIfNeeded()
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        constrainImageViewToEditingArea(imageView)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
    }
    
    func gestureHandler(_ handler: AdvancedImageGestureHandler, didTapImageView imageView: UIImageView) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
        gestureHandlers.forEach { gestureHandler in
            if gestureHandler !== handler {
                gestureHandler.setSelected(false)
            }
        }
        textLayers.forEach { $0.setSelected(false) }
        stickerViews.forEach { $0.setSelected(false) }
        currentTextLayer = nil
        currentStickerView = nil
        hideTextEditingPanel()
        
        selectedImageView = imageView
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
        ensureButtonsOnTop()
        
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ (placeholder), –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if imageView.image == UIImage(named: "placeholder") {
            if let tileView = imageView.superview,
               let gridContainer = collageView.viewWithTag(gridContainerTag),
               let index = gridContainer.subviews.firstIndex(of: tileView) {
                currentIndexPath = IndexPath(item: index, section: 0)
                presentImagePicker()
            }
        } else {
            // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º PhotoEditor
            if let currentImage = imageView.image {
                openPhotoEditor(with: currentImage, for: imageView)
            }
            handler.updateDeleteButtonVisibility()
        }
    }
    
    func gestureHandler(_ handler: AdvancedImageGestureHandler, didDeleteImageView imageView: UIImageView) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if let tileView = imageView.superview,
           let gridContainer = collageView.viewWithTag(gridContainerTag),
           let index = gridContainer.subviews.firstIndex(of: tileView) {
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ placeholder
            imageView.image = UIImage(named: "placeholder")
            imageView.contentMode = .scaleAspectFill
            imageView.backgroundColor = .lightGray
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è placeholder
            handler.updateDeleteButtonVisibility()
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            if index < selectedPhotos.count {
                selectedPhotos[index] = UIImage() // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            }
            
            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∂–µ—Å—Ç–æ–≤
            if let handlerIndex = gestureHandlers.firstIndex(of: handler) {
                gestureHandlers.remove(at: handlerIndex)
            }
            
            // –û—á–∏—â–∞–µ–º –∂–µ—Å—Ç—ã
            imageView.gestureRecognizers?.removeAll()
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ç–∞–ø –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            let tapGesture = UITapGestureRecognizer(target: self, action: #selector(selectImageForTile(_:)))
            imageView.addGestureRecognizer(tapGesture)
            imageView.tag = index
            imageView.isUserInteractionEnabled = true
            
            print("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ \(index)")
        }
    }
}
