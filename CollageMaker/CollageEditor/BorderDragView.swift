//
//  BorderDragView.swift
//  CollageMaker
//
//  Created by Assistant on 02.02.2025.
//

import UIKit
import SnapKit

protocol BorderDragViewDelegate: AnyObject {
    func borderDragView(_ view: BorderDragView, didChangeRatio ratio: CGFloat)
}

class BorderDragView: UIView {
    
    // MARK: - Properties
    
    weak var delegate: BorderDragViewDelegate?
    
    private let dragHandle: UIView = {
        let view = UIView()
        view.backgroundColor = .systemBlue.withAlphaComponent(0.7)
        view.layer.cornerRadius = 3
        view.layer.shadowColor = UIColor.black.cgColor
        view.layer.shadowOffset = CGSize(width: 0, height: 1)
        view.layer.shadowOpacity = 0.3
        view.layer.shadowRadius = 2
        return view
    }()
    
    private let hitArea: UIView = {
        let view = UIView()
        view.backgroundColor = .clear
        return view
    }()
    
    var ratio: CGFloat = 0.5 {
        didSet {
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.1-0.9 –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            ratio = max(0.1, min(0.9, ratio))
            delegate?.borderDragView(self, didChangeRatio: ratio)
        }
    }
    
    var isVertical: Bool = false {
        didSet {
            setupConstraints()
            updateAppearance()
        }
    }
    
    private var initialTouchPoint: CGPoint = .zero
    private var initialRatio: CGFloat = 0.5
    private var isDragging: Bool = false
    
    // MARK: - Initialization
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        setupUI()
        setupGestures()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    // MARK: - Setup
    
    private func setupUI() {
        backgroundColor = .clear
        
        addSubview(hitArea)
        addSubview(dragHandle)
        
        setupConstraints()
        updateAppearance()
    }
    
    private func setupConstraints() {
        hitArea.snp.remakeConstraints { make in
            make.edges.equalToSuperview()
        }
        
        if isVertical {
            // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
            dragHandle.snp.remakeConstraints { make in
                make.centerX.equalToSuperview()
                make.centerY.equalToSuperview()
                make.width.equalTo(6)
                make.height.equalTo(50)
            }
        } else {
            // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ (–¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞)
            dragHandle.snp.remakeConstraints { make in
                make.centerX.equalToSuperview()
                make.centerY.equalToSuperview()
                make.width.equalTo(50)
                make.height.equalTo(6)
            }
        }
    }
    
    private func updateAppearance() {
        dragHandle.layer.cornerRadius = 3
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        if isVertical {
            dragHandle.backgroundColor = .systemBlue.withAlphaComponent(0.7)
        } else {
            dragHandle.backgroundColor = .systemBlue.withAlphaComponent(0.7)
        }
    }
    
    private func setupGestures() {
        let panGesture = UIPanGestureRecognizer(target: self, action: #selector(handlePan(_:)))
        panGesture.minimumNumberOfTouches = 1
        panGesture.maximumNumberOfTouches = 1
        hitArea.addGestureRecognizer(panGesture)
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTap(_:)))
        hitArea.addGestureRecognizer(tapGesture)
    }
    
    // MARK: - Gesture Handlers
    
    @objc private func handlePan(_ gesture: UIPanGestureRecognizer) {
        switch gesture.state {
        case .began:
            initialTouchPoint = gesture.location(in: superview)
            initialRatio = ratio
            isDragging = true
            highlightBorder(true)
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–µ—Ä—Ü–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            superview?.layer.removeAllAnimations()
            
        case .changed:
            guard isDragging else { return }
            
            let currentPoint = gesture.location(in: superview)
            let delta: CGFloat
            
            if isVertical {
                // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - –∏–∑–º–µ–Ω—è–µ–º –ø–æ X
                delta = currentPoint.x - initialTouchPoint.x
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                guard superview != nil else { return }
                let sensitivity: CGFloat = 0.003 // –°–Ω–∏–∂–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                let normalizedDelta = delta * sensitivity
                
                ratio = max(0.1, min(0.9, initialRatio + normalizedDelta))
            } else {
                // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ - –∏–∑–º–µ–Ω—è–µ–º –ø–æ Y
                delta = currentPoint.y - initialTouchPoint.y
                
                guard superview != nil else { return }
                let sensitivity: CGFloat = 0.003
                let normalizedDelta = delta * sensitivity
                
                ratio = max(0.1, min(0.9, initialRatio + normalizedDelta))
            }
            
        case .ended, .cancelled:
            isDragging = false
            highlightBorder(false)
            
        default:
            break
        }
    }
    
    @objc private func handleTap(_ gesture: UITapGestureRecognizer) {
        // –°–±—Ä–æ—Å –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é
        ratio = 0.5
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
        highlightBorder(true)
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            self.highlightBorder(false)
        }
        
        print("üîß –°–±—Ä–æ—Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ 50%")
    }
    
    // MARK: - Visual Feedback
    
    private func highlightBorder(_ highlight: Bool) {
        UIView.animate(withDuration: 0.15, delay: 0, options: [.allowUserInteraction], animations: {
            if highlight {
                self.dragHandle.backgroundColor = .systemBlue
                self.dragHandle.transform = CGAffineTransform(scaleX: 1.3, y: 1.3)
                self.dragHandle.layer.shadowOpacity = 0.5
            } else {
                self.dragHandle.backgroundColor = .systemBlue.withAlphaComponent(0.7)
                self.dragHandle.transform = .identity
                self.dragHandle.layer.shadowOpacity = 0.3
            }
        })
    }
    
    // MARK: - Touch Handling
    
    override func hitTest(_ point: CGPoint, with event: UIEvent?) -> UIView? {
        // –†–∞—Å—à–∏—Ä—è–µ–º –æ–±–ª–∞—Å—Ç—å –∫–∞—Å–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        let expandedBounds = bounds.insetBy(dx: -15, dy: -15)
        if expandedBounds.contains(point) {
            return hitArea
        }
        return super.hitTest(point, with: event)
    }
    
    // MARK: - Lifecycle
    
    override func layoutSubviews() {
        super.layoutSubviews()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        updateAppearance()
    }
} 